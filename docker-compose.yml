version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: transparencia_postgres
    environment:
      POSTGRES_DB: transparencia
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    networks:
      - transparencia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: transparencia_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - transparencia_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: transparencia_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/transparencia
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=development
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000,http://localhost:8080
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - transparencia_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    image: node:18-alpine
    container_name: transparencia_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_NAME=Portal de Transparência
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    depends_on:
      - backend
    working_dir: /app
    networks:
      - transparencia_network
    command: >
      sh -c "npm install && npm run dev"

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: transparencia_nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      backend:
        condition: service_started
      frontend:
        condition: service_started
    networks:
      - transparencia_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Elasticsearch (para busca avançada)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: transparencia_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - transparencia_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (para visualização de logs)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: transparencia_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - transparencia_network

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: transparencia_minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - transparencia_network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Celery Worker (comentado até implementar o módulo celery_app)
  # celery_worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: transparencia_celery_worker
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/transparencia
  #     - REDIS_URL=redis://redis:6379
  #     - SECRET_KEY=your-super-secret-key-change-in-production
  #   volumes:
  #     - ./backend:/app
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - transparencia_network
  #   command: celery -A app.celery_app worker --loglevel=info

  # # Celery Beat (comentado até implementar o módulo celery_app)
  # celery_beat:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: transparencia_celery_beat
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/transparencia
  #     - REDIS_URL=redis://redis:6379
  #     - SECRET_KEY=your-super-secret-key-change-in-production
  #   volumes:
  #     - ./backend:/app
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - transparencia_network
  #   command: celery -A app.celery_app beat --loglevel=info

  # # Flower (comentado até implementar o módulo celery_app)
  # flower:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: transparencia_flower
  #   environment:
  #     - REDIS_URL=redis://redis:6379
  #   ports:
  #     - "5555:5555"
  #   depends_on:
  #     - redis
  #   networks:
  #     - transparencia_network
  #   command: celery -A app.celery_app flower --port=5555

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  backend_uploads:

networks:
  transparencia_network:
    driver: bridge

